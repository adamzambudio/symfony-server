security:
    enable_authenticator_manager: true

    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        login:
            pattern: ^/api/login_check
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

    access_control:
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/api/properties, roles: PUBLIC_ACCESS, methods: [GET] } 
        - { path: ^/api/properties/cities, roles: PUBLIC_ACCESS }
        - { path: ^/api/properties/types, roles: PUBLIC_ACCESS }
        - { path: ^/api/properties/prices, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
         # 3) Para POST a /api/properties (creaci√≥n) SOLO ADMIN
        - { path: ^/api/properties$,       roles: ROLE_ADMIN, methods: [POST] }

         # 4) Para PUT/PATCH a /api/properties/{id} (actualizar) SOLO ADMIN
        - { path: ^/api/properties/\d+$,   roles: ROLE_ADMIN, methods: [PUT, PATCH] }

        # 5) Para DELETE a /api/properties/{id} (borrar) SOLO ADMIN
        - { path: ^/api/properties/\d+$,   roles: ROLE_ADMIN, methods: [DELETE] }
